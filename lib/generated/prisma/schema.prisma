generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(uuid()) @db.Uuid
  name                 String       @default("N0_NAME")
  email                String       @unique(map: "user_email_idx")
  emailVerified        DateTime?    @db.Timestamp(6)
  image                String?
  password             String?
  paymentMethod        String?
  createdAt            DateTime     @default(now()) @db.Timestamp(6)
  updatedAt            DateTime     @updatedAt
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  accounts             Account[]
  address              Address[]
  Investment           Investment[]
  sessions             Session[]
  roles                UserRole[]
}

model Role {
  id    String     @id @default(uuid()) @db.Uuid
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId     String   @db.Uuid
  roleId     String   @db.Uuid
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Address {
  id            String      @id @default(uuid()) @db.Uuid
  no            String
  line1         String
  line2         String?
  state         String
  city          String
  code          String
  gps           String
  useAsDelivery Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String      @db.Uuid
  addressTypeId String      @db.Uuid
  addressType   AddressType @relation(fields: [addressTypeId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model AddressType {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique
  addresses Address[]
}

model Product {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  description  String
  imageUrl     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  productTasks ProductTask[]
  tasks        Task[]
  investments  Investment[]  @relation("InvestmentToProduct")
}

model Task {
  id            String       @id @default(uuid()) @db.Uuid
  investmentId  String       @db.Uuid
  name          String
  description   String
  status        TaskStatus   @default(PENDING)
  imageUrl      String?
  completedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  productId     String?      @db.Uuid
  productTaskId String?      @db.Uuid
  product       Product?     @relation(fields: [productId], references: [id])
  productTask   ProductTask? @relation(fields: [productTaskId], references: [id])
  audits        TaskAudit[]
}

model ProductTask {
  id           String     @id @default(uuid()) @db.Uuid
  investmentId String     @db.Uuid
  name         String
  description  String
  status       TaskStatus @default(PENDING)
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  productId    String     @db.Uuid
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  task         Task[]
}

model TaskAudit {
  id        String   @id @default(uuid()) @db.Uuid
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String   @db.Uuid
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Investment {
  id             String           @id @default(uuid()) @db.Uuid
  userId         String           @db.Uuid
  cropId         String?
  livestockId    String?
  amount         Float
  investmentType InvestmentType
  status         InvestmentStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  products       Product[]        @relation("InvestmentToProduct")
}

model Carousel {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  imageUrl    String
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(uuid()) @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  userId            String   @db.Uuid
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum InvestmentType {
  SIX_MONTHS
  ONE_YEAR
}

enum InvestmentStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
